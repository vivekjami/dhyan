# Dhyan - Task Scheduling & Management App

## Project Overview
Create a modern, clean, and simple task scheduling web application called "Dhyan" using Next.js. The app should have smooth animations and an intuitive interface for daily task management with progress tracking.

## Tech Stack Requirements
- **Framework**: Next.js 14+ with App Router
- **Styling**: TailwindCSS with custom animations
- **State Management**: React hooks (useState, useEffect, useContext)
- **Storage**: localStorage for data persistence
- **Icons**: Lucide React or Heroicons
- **Animations**: Framer Motion or CSS animations

## Core Features to Implement

### 1. Main Dashboard Layout
```
- Clean header with "Dhyan" branding and current date
- Sidebar with daily analytics (tasks completed, time spent, etc.)
- Main content area with task board
- Floating action button for adding new tasks
```

### 2. Task Management System
```
Each task should have:
- Title (required, max 50 characters)
- Description (optional, max 200 characters)
- Estimated time (in minutes, 15-480 range)
- Status: pending, in-progress, completed
- Created timestamp
- Started/completed timestamps
```

### 3. Task Card Design
```
- Modern card design with subtle shadows
- Color-coded status indicators (gray=pending, blue=in-progress, green=completed)
- Smooth hover animations
- Progress bar for active tasks
- Action buttons: Start, Edit, Delete, Complete
- Time estimation display
- Drag handle for reordering
```

### 4. Task Flow Logic
```
- Only one task can be "in-progress" at a time
- Starting a task shows animated progress bar
- Progress bar fills based on estimated time
- "Complete Task" button appears when task is started
- Completed tasks move to bottom with visual distinction
- Next task automatically becomes available to start
```

### 5. Interactive Features
```
- Add Task Modal/Slideout:
  * Form with title, description, time inputs
  * Real-time validation
  * Smooth slide-in animation
  
- Edit Task:
  * Inline editing or modal
  * Pre-populated with existing data
  * Cancel/save options
  
- Delete Confirmation:
  * Subtle confirmation dialog
  * Undo option for 5 seconds
  
- Drag & Drop:
  * Reorder tasks with smooth animations
  * Visual feedback during dragging
  * Snap-to-position effects
```

### 6. Progress Tracking
```
- Real-time progress bar with percentage
- Estimated time remaining counter
- Visual completion celebrations (confetti/checkmark animation)
- Task completion sound effect (optional)
```

### 7. Analytics Dashboard
```
- Total tasks for the day
- Completed tasks count
- Total time spent
- Average completion time
- Productivity percentage
- Visual progress rings or charts
```

### 8. Data Persistence
```
- Save all data to localStorage
- Auto-save on every change
- Restore state on page refresh
- Handle localStorage errors gracefully
- Daily data reset at midnight
```

## Design Specifications

### Color Palette
```
- Primary: #6366f1 (Indigo)
- Secondary: #8b5cf6 (Purple)
- Success: #10b981 (Emerald)
- Warning: #f59e0b (Amber)
- Error: #ef4444 (Red)
- Background: #f8fafc (Slate-50)
- Card: #ffffff
- Text: #1e293b (Slate-800)
- Muted: #64748b (Slate-500)
```

### Typography
```
- Font: Inter or Poppins
- Heading: font-bold text-2xl
- Subheading: font-semibold text-lg
- Body: font-medium text-base
- Caption: font-normal text-sm
```

### Animation Guidelines
```
- Page transitions: 300ms ease-in-out
- Card hover: scale(1.02) with 200ms transition
- Button hover: subtle color change + scale(1.05)
- Progress bar: smooth width transition
- Modal/slideout: slide-in from right
- Delete: fade-out + slide-up
- Completion: bounce + fade effects
```

## Component Structure
```
app/
├── layout.tsx (main layout with font setup)
├── page.tsx (dashboard page)
├── components/
│   ├── Header.tsx
│   ├── Sidebar.tsx
│   ├── TaskBoard.tsx
│   ├── TaskCard.tsx
│   ├── AddTaskModal.tsx
│   ├── ProgressBar.tsx
│   ├── Analytics.tsx
│   └── ConfirmDialog.tsx
├── hooks/
│   ├── useTasks.ts
│   ├── useLocalStorage.ts
│   └── useTimer.ts
├── types/
│   └── task.ts
└── utils/
    └── helpers.ts
```

## Key Implementation Details

### Task Interface
```typescript
interface Task {
  id: string;
  title: string;
  description?: string;
  estimatedTime: number; // in minutes
  status: 'pending' | 'in-progress' | 'completed';
  createdAt: Date;
  startedAt?: Date;
  completedAt?: Date;
  order: number;
}
```

### Progress Calculation
```typescript
// Progress based on elapsed time vs estimated time
const progressPercentage = Math.min(
  (elapsedTime / estimatedTime) * 100, 
  100
);
```

### Animation Examples
```css
/* Card hover animation */
.task-card {
  @apply transition-all duration-200 hover:scale-102 hover:shadow-lg;
}

/* Progress bar animation */
.progress-bar {
  @apply transition-all duration-1000 ease-out;
}

/* Completion celebration */
@keyframes celebrate {
  0% { transform: scale(1); }
  50% { transform: scale(1.1); }
  100% { transform: scale(1); }
}
```

## User Experience Flow
1. User lands on clean dashboard showing today's date
2. Empty state shows friendly message to add first task
3. Click floating "+" button opens add task modal
4. Fill task details with real-time validation
5. Task appears in board with smooth animation
6. Click "Start Task" begins progress tracking
7. Progress bar fills with smooth animation
8. "Complete Task" button appears when ready
9. Completion triggers celebration animation
10. Task moves to completed section
11. Analytics update in real-time

## Performance Considerations
- Lazy load modals and heavy components
- Debounce localStorage writes
- Optimize re-renders with React.memo
- Use CSS transforms for animations (better performance)
- Implement virtual scrolling for large task lists

## Accessibility Features
- Keyboard navigation support
- ARIA labels for all interactive elements
- Focus management in modals
- Color contrast compliance
- Screen reader announcements for status changes

## Mobile Responsiveness
- Touch-friendly button sizes (min 44px)
- Swipe gestures for task actions
- Responsive grid layout
- Mobile-optimized modals (full-screen on small devices)
- Proper viewport configuration

## Error Handling
- Graceful localStorage failures
- Form validation with helpful messages
- Network-independent operation
- Fallback states for missing data
- User-friendly error messages

## Testing Approach
- Unit tests for utility functions
- Component testing with React Testing Library
- E2E tests for critical user flows
- Accessibility testing with axe
- Performance testing with Lighthouse

## Deployment
- Static export for easy hosting
- Environment variable configuration
- Build optimization
- SEO meta tags
- Progressive Web App features (optional)

Create this application with attention to detail, smooth animations, and an exceptional user experience. Focus on making the interface feel responsive and delightful to use while maintaining clean, maintainable code structure.